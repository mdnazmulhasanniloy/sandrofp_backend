"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exchangesRoutes = void 0;
const express_1 = require("express");
const exchanges_controller_1 = require("./exchanges.controller");
const auth_1 = __importDefault(require("../../middleware/auth"));
const user_constants_1 = require("../user/user.constants");
const validateRequest_1 = __importDefault(require("../../middleware/validateRequest"));
const exchanges_validation_1 = require("./exchanges.validation");
const router = (0, express_1.Router)();
router.post('/', (0, auth_1.default)(user_constants_1.USER_ROLE.user), exchanges_controller_1.exchangesController.createExchanges);
router.patch('/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.user, user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), exchanges_controller_1.exchangesController.updateExchanges);
router.patch('/accepted/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.user), exchanges_controller_1.exchangesController.acceptExchange);
router.patch('/decline/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.user), exchanges_controller_1.exchangesController.declineExchange);
router.patch('/approved/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE === null || user_constants_1.USER_ROLE === void 0 ? void 0 : user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), exchanges_controller_1.exchangesController.approvedExchange);
router.patch('/rejected/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE === null || user_constants_1.USER_ROLE === void 0 ? void 0 : user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), (0, validateRequest_1.default)(exchanges_validation_1.exchangeValidator.rejectExchangeSchema), exchanges_controller_1.exchangesController.rejectedExchange);
router.delete('/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.user, user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), exchanges_controller_1.exchangesController.deleteExchanges);
router.get('/my-requests', (0, auth_1.default)(user_constants_1.USER_ROLE.user), exchanges_controller_1.exchangesController.getMyRequestedExchanges);
router.get('/requests-for-me', (0, auth_1.default)(user_constants_1.USER_ROLE.user), exchanges_controller_1.exchangesController.getExchangeRequestsForMe);
router.get('/:id', (0, auth_1.default)(user_constants_1.USER_ROLE.user, user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), exchanges_controller_1.exchangesController.getExchangesById);
router.get('/', (0, auth_1.default)(user_constants_1.USER_ROLE.admin, user_constants_1.USER_ROLE.sub_admin, user_constants_1.USER_ROLE.super_admin), exchanges_controller_1.exchangesController.getAllExchanges);
exports.exchangesRoutes = router;
